{"version":3,"sources":["Main.js","App.js","serviceWorker.js","index.js"],"names":["Main","className","type","onClick","this","loadByAxios","bind","value","loadByFetch","e","console","log","axios","get","headers","then","response","catch","error","preventDefault","url","state","data","fetch","method","mode","body","json","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wRA0DeA,E,iLArDP,OACG,yBAAKC,UAAU,YACd,2BAAOC,KAAK,SAASD,UAAU,kBAAkBE,QAASC,KAAKC,YAAYC,KAAKF,MAAOG,MAAM,eAAc,6BAC3G,2BAAOL,KAAK,SAASD,UAAU,kBAAkBE,QAASC,KAAKI,YAAYF,KAAKF,MAAOG,MAAM,kB,kCAKzFE,GAERC,QAAQC,IAAI,6CACZC,IAAMC,IAAI,kCACP,CACLC,QAAS,CACR,8BAA+B,IAC/B,eAAgB,sBAIVC,MAAK,SAAAC,GAAQ,OAAIN,QAAQC,IAAI,aAAcK,MAC3CC,OAAM,SAAAC,GAAK,OAAIR,QAAQC,IAAI,eAAeO,MAC/CR,QAAQC,IAAI,2C,kCAGJF,GACRA,EAAEU,iBACFT,QAAQC,IAAI,wCAEZ,IAAMS,EAAMhB,KAAKiB,MAAMD,IACnBE,EAAOlB,KAAKiB,MAAMC,KACtBC,MAAMH,EAAK,CACPI,OAAQ,OACRC,KAAM,UACNC,KAAMJ,EACNR,QAAS,CACd,8BAA+B,IAC/B,OAAU,mBACV,eAAgB,sBAIZC,MAAK,SAAAC,GAAQ,OAAIA,EAASW,UAC1BZ,MAAK,SAAAO,GAAI,OAAIZ,QAAQC,IAAIW,MACzBL,OAAM,SAAAC,GAAK,OAAIR,QAAQC,IAAIO,MAE9BR,QAAQC,IAAI,4C,GA/CDiB,a,MCcJC,MAdf,WACE,OACE,yBAAK5B,UAAU,aACb,0CAGA,8BACE,kBAAC,EAAD,OAEF,4CCAc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.a943a7b2.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport axios from 'axios'\r\n\r\nclass Main extends Component {\r\n    render(){\r\n        return(\r\n           <div className=\"app-form\">\r\n            <input type=\"submit\" className=\"btn btn-primary\" onClick={this.loadByAxios.bind(this)} value=\"send axios\"/><hr />\r\n            <input type=\"submit\" className=\"btn btn-primary\" onClick={this.loadByFetch.bind(this)} value=\"send fetch\"/>\r\n           </div>\r\n    )}\r\n\r\n\r\n    loadByAxios(e){\r\n      //  e.preventDefault()\r\n        console.log('LoadByAxios -----------------------------')\r\n        axios.get('http://larareact/public/vehicle',\r\n           {\r\n\t\t    headers: {\r\n\t\t\t    'Access-Control-Allow-Origin': '*',\r\n\t\t\t    'Content-Type': 'application/json',\r\n\t\t        },\r\n             } \r\n             )\r\n            .then(response => console.log('response: ', response))\r\n            .catch(error => console.log('some error: ',error))\r\n        console.log('--------------------------LoadByAxios') \r\n    }\r\n\r\n    loadByFetch(e){\r\n        e.preventDefault()\r\n        console.log('loadByFetch ------------------------')\r\n\r\n        const url = this.state.url\r\n        let data = this.state.data        \r\n        fetch(url, {\r\n            method: 'POST', // или 'PUT'\r\n            mode: 'no-cors',\r\n            body: data, // данные могут быть 'строкой' или {объектом}!\r\n            headers: {\r\n\t\t\t    'Access-Control-Allow-Origin': '*',\r\n\t\t\t    'Accept': 'application/json',\r\n\t\t\t    'Content-Type': 'application/json',\r\n\r\n            }\r\n          })\r\n          .then(response => response.json())\r\n          .then(data => console.log(data))\r\n          .catch(error => console.log(error))\r\n\r\n        console.log('------------------------ loadByFetch')\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default Main","import React from 'react';\r\nimport Main from './Main'\r\nimport './css/style.css'\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <header>\r\n        header\r\n      </header>\r\n      <main>\r\n        <Main />\r\n      </main>\r\n      <footer>footer</footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}